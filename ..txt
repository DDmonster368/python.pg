from PyQt5.QtWidgets import (
   QApplication, QWidget,
   QFileDialog, # Діалог відкриття файлів (і папок)
   QLabel, QPushButton, QListWidget,
   QHBoxLayout, QVBoxLayout
)


from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PIL import Image, ImageFilter
from PIL.ImageFilter import (
    SHARPEN, DETAIL, CONTOUR, BLUR,
    SMOOTH, EMBOSS,SMOOTH_MORE)


import os




app = QApplication([])
win = QWidget()      
win.resize(700, 500)
win.setWindowTitle('Easy Editor')
lb_image = QLabel("Картинка")
btn_dir = QPushButton("Папка")
lw_files = QListWidget()




btn_left = QPushButton("Вліво")
btn_right = QPushButton("Вправо")
btn_flip = QPushButton("Дзеркало")
btn_sharp = QPushButton("Різкість")
btn_bw = QPushButton("Ч/Б")




row = QHBoxLayout()          # Основний рядок
col1 = QVBoxLayout()         # ділиться на два стовпці
col2 = QVBoxLayout()
col1.addWidget(btn_dir)      # у першому – кнопка вибору директорії
col1.addWidget(lw_files)     # та список файлів
col2.addWidget(lb_image, 95) # у другому - картинка
row_tools = QHBoxLayout()    # та рядок кнопок
row_tools.addWidget(btn_left)
row_tools.addWidget(btn_right)
row_tools.addWidget(btn_flip)
row_tools.addWidget(btn_sharp)
row_tools.addWidget(btn_bw)
col2.addLayout(row_tools)




row.addLayout(col1, 20)
row.addLayout(col2, 80)
win.setLayout(row)




win.show()


workdir = ''


def chooseworkdir():
    global workdir
    workdir = QFileDialog.getExistingDirectory()


def filter(filenames,extensions):
    result = []
    for f in filenames:
        for e in extensions:
            if f.endswith(e):
                result.append(f)
    return result




def showfiles():
    extensions = ['.jpg','.jpeg','.png','gif']
    chooseworkdir()
    filenames = filter(os.listdir(workdir),extensions)
    lw_files.clear()
    for f in filenames:
        lw_files.addItem(f)




btn_dir.clicked.connect(showfiles)


class ImageProcessor():
    def __init__(self):
        self.image = None
        self.filename = None
        self.dir = None
        self.save_dir = "Modified/"


    def saveImage(self):
        path = os.path.join(workdir,self.save_dir)
        if not (os.path.exists(path) or os.path.isdir(path)):
            os.mkdir(path)
        image_path = os.path.join(path,self.filename)
        self.image.save(image_path)


    def flip(self):
        self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
        self.saveImage()
        image_path = os.path.join(workdir,self.save_dir,self.filename)
        self.showImage(image_path)




    def loadImage(self,dir, filename):
        self.dir = dir
        self.filename = filename
        file_path = os.path.join(dir, filename)
        self.image = Image.open(file_path)


    def showImage(self, path):
        lb_image.hide()
        pixmapimage = QPixmap(path)
        w = lb_image.width()
        h = lb_image.height()
        pixmapimage = pixmapimage.scaled(w,h, Qt.KeepAspectRatio)
        lb_image.setPixmap(pixmapimage)
        lb_image.show()




   
def showChosenImage():
    if lw_files.currentRow() >= 0:
        f = lw_files.currentItem().text()
        work.loadImage(workdir,f)
        image_path = os.path.join(work.dir,work.filename)
        work.showImage(image_path)




work = ImageProcessor()
lw_files.currentRowChanged.connect(showChosenImage)


btn_flip.clicked.connect(work.flip)


app.exec()


